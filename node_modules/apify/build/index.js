"use strict";

var _events = _interopRequireDefault(require("events"));

var _log = _interopRequireDefault(require("apify-shared/log"));

var _actor = require("./actor");

var _autoscaled_pool = _interopRequireDefault(require("./autoscaling/autoscaled_pool"));

var _basic_crawler = _interopRequireDefault(require("./crawlers/basic_crawler"));

var _cheerio_crawler = _interopRequireDefault(require("./crawlers/cheerio_crawler"));

var _dataset = require("./dataset");

var _events2 = _interopRequireWildcard(require("./events"));

var _key_value_store = require("./key_value_store");

var _puppeteer = require("./puppeteer");

var _puppeteer_crawler = _interopRequireDefault(require("./crawlers/puppeteer_crawler"));

var _puppeteer_pool = _interopRequireDefault(require("./puppeteer_pool"));

var _request = _interopRequireDefault(require("./request"));

var _request_list = require("./request_list");

var _request_queue = require("./request_queue");

var _utils = require("./utils");

var _puppeteer_utils = require("./puppeteer_utils");

var _utils_social = require("./utils_social");

var _enqueue_links = require("./enqueue_links/enqueue_links");

var _pseudo_url = _interopRequireDefault(require("./pseudo_url"));

var _live_view_server = _interopRequireDefault(require("./live_view/live_view_server"));

var _utils_request = require("./utils_request");

var _session_pool = require("./session_pool/session_pool");

var _session = require("./session_pool/session");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Increase the global limit for event emitter memory leak warnings.
_events.default.defaultMaxListeners = 50; // Log as plain text not JSON

_log.default.logJson = false;
/**
 * The following section describes all functions and properties provided by the `apify` package,
 * except individual classes and namespaces that have their separate, detailed, documentation pages
 * accessible from the left sidebar.
 *
 * @module Apify
 */

module.exports = {
  main: _actor.main,
  getEnv: _actor.getEnv,
  call: _actor.call,
  callTask: _actor.callTask,
  metamorph: _actor.metamorph,
  getMemoryInfo: _utils.getMemoryInfo,
  getApifyProxyUrl: _actor.getApifyProxyUrl,
  isAtHome: _utils.isAtHome,
  client: _utils.apifyClient,
  addWebhook: _actor.addWebhook,
  AutoscaledPool: _autoscaled_pool.default,
  BasicCrawler: _basic_crawler.default,
  CheerioCrawler: _cheerio_crawler.default,
  pushData: _dataset.pushData,
  openDataset: _dataset.openDataset,
  events: _events2.default,
  initializeEvents: _events2.initializeEvents,
  stopEvents: _events2.stopEvents,
  getValue: _key_value_store.getValue,
  setValue: _key_value_store.setValue,
  getInput: _key_value_store.getInput,
  openKeyValueStore: _key_value_store.openKeyValueStore,
  launchPuppeteer: _puppeteer.launchPuppeteer,
  PuppeteerPool: _puppeteer_pool.default,
  PuppeteerCrawler: _puppeteer_crawler.default,
  PseudoUrl: _pseudo_url.default,
  Request: _request.default,
  RequestList: _request_list.RequestList,
  openRequestList: _request_list.openRequestList,
  openRequestQueue: _request_queue.openRequestQueue,
  openSessionPool: _session_pool.openSessionPool,
  LiveViewServer: _live_view_server.default,
  Session: _session.Session,
  utils: Object.assign(_utils.publicUtils, {
    puppeteer: _puppeteer_utils.puppeteerUtils,
    social: _utils_social.socialUtils,
    log: _log.default,
    enqueueLinks: _enqueue_links.enqueueLinks,
    requestAsBrowser: _utils_request.requestAsBrowser
  })
}; // Add docs for log separately, as it's imported from apify-shared.
// Adding them directly to the log object in utils breaks JSDoc.

/**
 * The log instance enables level aware logging of messages and we advise
 * to use it instead of `console.log()` and its aliases in most development
 * scenarios.
 *
 * A very useful use case for `log` is using `log.debug` liberally throughout
 * the codebase to get useful logging messages only when appropriate log level is set
 * and keeping the console tidy in production environments.
 *
 * The available logging levels are, in this order: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `OFF`
 * and can be referenced from the `log.LEVELS` constant, such as `log.LEVELS.ERROR`.
 *
 * To log messages to the system console, use the `log.level(message)` invocation,
 * such as `log.debug('this is a debug message')`.
 *
 * To prevent writing of messages above a certain log level to the console, simply
 * set the appropriate level. The default log level is `INFO`, which means that
 * `DEBUG` messages will not be printed, unless enabled.
 *
 * **Example:**
 * ```
 * const Apify = require('apify');
 * const { log } = Apify.utils;
 *
 * log.info('Information message', { someData: 123 }); // prints message
 * log.debug('Debug message', { debugData: 'hello' }); // doesn't print anything
 *
 * log.setLevel(log.LEVELS.DEBUG);
 * log.debug('Debug message'); // prints message
 *
 * log.setLevel(log.LEVELS.ERROR);
 * log.debug('Debug message'); // doesn't print anything
 * log.info('Info message'); // doesn't print anything
 *
 * log.error('Error message', { errorDetails: 'This is bad!' }); // prints message
 * try {
 *   throw new Error('Not good!');
 * } catch (e) {
 *   log.exception(e, 'Exception occurred', { errorDetails: 'This is really bad!' }); // prints message
 * }
 * ```
 *
 * Another very useful way of setting the log level is by setting the `APIFY_LOG_LEVEL`
 * environment variable, such as `APIFY_LOG_LEVEL=DEBUG`. This way, no code changes
 * are necessary to turn on your debug messages and start debugging right away.
 * @namespace log
 */

/**
 * Map of available log levels that's useful for easy setting of appropriate log levels.
 * Each log level is represented internally by a number. Eg. `log.LEVELS.DEBUG === 5`.
 * @name LEVELS
 * @type Object
 * @memberOf log
 */

/**
 * Sets the log level to the given value, preventing messages from less important log levels
 * from being printed to the console. Use in conjunction with the `log.LEVELS` constants such as
 *
 * ```
 * log.setLevel(log.LEVELS.DEBUG);
 * ```
 *
 * Default log level is INFO.
 * @name setLevel
 * @param {number} level
 * @method
 * @memberOf log
 */

/**
 * Returns the currently selected logging level. This is useful for checking whether a message
 * will actually be printed to the console before one actually performs a resource intensive operation
 * to construct the message, such as querying a DB for some metadata that need to be added. If the log
 * level is not high enough at the moment, it doesn't make sense to execute the query.
 * @name getLevel
 * @method
 * @memberOf log
 */

/**
 * Logs a `DEBUG` message. By default, it will not be written to the console. To see `DEBUG`
 * messages in the console, set the log level to `DEBUG` either using the `log.setLevel(log.LEVELS.DEBUG)`
 * method or using the environment variable `APIFY_LOG_LEVEL=DEBUG`. Data are stringified and appended
 * to the message.
 * @name debug
 * @param {string} message
 * @param {Object} [data]
 * @method
 * @memberOf log
 */

/**
 * Logs an `INFO` message. `INFO` is the default log level so info messages will be always logged,
 * unless the log level is changed. Data are stringified and appended to the message.
 * @name info
 * @param {string} message
 * @param {Object} [data]
 * @method
 * @memberOf log
 */

/**
 * Logs a `WARNING` level message. Data are stringified and appended to the message.
 * @name warning
 * @param {string} message
 * @param {Object} [data]
 * @method
 * @memberOf log
 */

/**
 * Logs an `ERROR` message. Use this method to log error messages that are not directly connected
 * to an exception. For logging exceptions, use the `log.exception` method.
 * @name error
 * @param {string} message
 * @param {Object} [data]
 * @method
 * @memberOf log
 */

/**
 * Logs an `ERROR` level message with a nicely formatted exception. Note that the exception is the first parameter
 * here and an additional message is only optional.
 * @name exception
 * @param {Error} exception
 * @param {string} [message]
 * @param {Object} [data]
 * @method
 * @memberOf log
 */