"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestAsBrowser = exports.REQUEST_AS_BROWSER_DEFAULT_OPTIONS = exports.FIREFOX_DESKTOP_USER_AGENT = exports.FIREFOX_MOBILE_USER_AGENT = void 0;

var _contentType = _interopRequireDefault(require("content-type"));

var url = _interopRequireWildcard(require("url"));

var _underscore = _interopRequireDefault(require("underscore"));

var _httpRequest = _interopRequireDefault(require("@apify/http-request"));

var _errors = _interopRequireDefault(require("@apify/http-request/src/errors"));

var _errors2 = require("./errors");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FIREFOX_MOBILE_USER_AGENT = 'Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0';
exports.FIREFOX_MOBILE_USER_AGENT = FIREFOX_MOBILE_USER_AGENT;
const FIREFOX_DESKTOP_USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0';
exports.FIREFOX_DESKTOP_USER_AGENT = FIREFOX_DESKTOP_USER_AGENT;
const REQUEST_AS_BROWSER_DEFAULT_OPTIONS = {
  countryCode: 'US',
  languageCode: 'en',
  headers: {},
  method: 'GET',
  useMobileVersion: false,
  useBrotli: true,
  json: false,
  abortFunction: res => {
    const {
      type
    } = _contentType.default.parse(res.headers['content-type']);

    return res.statusCode === 406 || type.toLowerCase() !== 'text/html';
  },
  useCaseSensitiveHeaders: true,
  useStream: false,
  proxyUrl: null,
  timeoutSecs: 30
};
/**
 * Sends a HTTP request that looks like a request sent by a web browser,
 * fully emulating browser's HTTP headers.
 *
 * This function is useful for web scraping of websites that send the full HTML in the first response.
 * Thanks to this function, the target web server has no simple way to find out the request
 * hasn't been sent by a full web browser. Using a headless browser for such requests
 * is an order of magnitude more resource-intensive than this function.
 * By default tt aborts all requests that returns 406 status codes or non-HTML content-types.
 * You can override this behavior by passing custom `abortFunction`.
 *
 * Currently, the function sends requests the same way as Firefox web browser does.
 * In the future, it might add support for other browsers too.
 *
 * Internally, the function uses httpRequest function from the [@apify/httpRequest](https://github.com/apifytech/http-request)
 * NPM package to perform the request.
 * All `options` not recognized by this function are passed to it,
 * so see it for more details.
 *
 * @param options.url
 *  URL of the target endpoint. Supports both HTTP and HTTPS schemes.
 * @param [options.method=GET]
 *  HTTP method.
 * @param [options.headers]
 *  Additional HTTP headers to add. It's only recommended to use this option,
 *  with headers that are typically added by websites, such as cookies. Overriding
 *  default browser headers will remove the masking this function provides.
 * @param [options.languageCode=en]
 *  Two-letter ISO 639 language code.
 * @param [options.countryCode=US]
 *  Two-letter ISO 3166 country code.
 * @param [options.isMobile]
 *  If `true`, the function uses User-Agent of a mobile browser.
 * @param [options.abortFunction]
 *  Function accepts `response` object as a single parameter and should return true or false.
 *  If function returns true request gets aborted. This function is passed to the
 *  (@apify/http-request)[https://www.npmjs.com/package/@apify/http-request] NPM package.
 *
 * @return {Promise<http.IncomingMessage|stream.Readable>}
 * @memberOf utils
 * @name requestAsBrowser
 */

exports.REQUEST_AS_BROWSER_DEFAULT_OPTIONS = REQUEST_AS_BROWSER_DEFAULT_OPTIONS;

const requestAsBrowser = async options => {
  const opts = _underscore.default.defaults({}, options, REQUEST_AS_BROWSER_DEFAULT_OPTIONS);

  const parsedUrl = url.parse(opts.url);
  const defaultHeaders = {
    Host: parsedUrl.host,
    'User-Agent': opts.useMobileVersion ? FIREFOX_MOBILE_USER_AGENT : FIREFOX_DESKTOP_USER_AGENT,
    Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': `${opts.languageCode}-${opts.countryCode},${opts.languageCode};q=0.5`,
    'Accept-Encoding': 'gzip, deflate, br',
    Connection: 'keep-alive'
  }; // Users can provide headers in lowercase so we need to make sure
  // that their values are applied, but names are kept upper-case.

  opts.headers = mergeHeaders(opts.headers, defaultHeaders);

  try {
    return await (0, _httpRequest.default)(opts);
  } catch (e) {
    if (e instanceof _errors.default.TimeoutError) {
      throw new _errors2.TimeoutError(`Request Timed-out after ${opts.timeoutSecs} seconds.`);
    }

    throw e;
  }
};

exports.requestAsBrowser = requestAsBrowser;

function mergeHeaders(userHeaders, defaultHeaders) {
  const headers = { ...defaultHeaders,
    ...userHeaders
  };
  Object.keys(headers).forEach(key => {
    const lowerCaseKey = key.toLowerCase();
    const keyIsNotLowerCase = key !== lowerCaseKey; // eslint-disable-next-line

    if (keyIsNotLowerCase && headers.hasOwnProperty(lowerCaseKey)) {
      headers[key] = headers[lowerCaseKey];
      delete headers[lowerCaseKey];
    }
  });
  return headers;
}